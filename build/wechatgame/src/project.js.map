{"version":3,"sources":["assets/Script/Views/fourTouchNodesView.js","assets/Script/mainScene.js","assets/Script/Views/threeTouchNodesView.js","assets/Script/Views/twoTouchNodesView.js","assets/Script/Views/wordView.js"],"names":["cc","Class","extends","Component","properties","labels","default","type","Label","touchNodes","Node","_lineStartNode","_lineEndNode","_letters","_letterArr","onLoad","this","node","on","EventType","TOUCH_START","event","console","log","location","getLocation","pos","convertToNodeSpaceAR","forEach","touchNode","index","getBoundingBox","contains","push","string","bind","TOUCH_UP","TOUCH_MOVE","word","join","_event","Event","EventCustom","detail","dispatchEvent","start","setLetters","__letters","reload","Array","length","label","twoTouchNodesPrefab","Prefab","threeTouchNodesPrefab","fourTouchNodesPrefab","wordPrefab","content","lblPass","_words","_wordArr","_passWordArr","active","__word","checkAllWordsPassed","i","showPassedWord","setWords","split","letterArr","touchNodePrefab","touchNodeName","uniq","instantiate","addChild","touchNodeView","getComponent","wordNode","wordView","setWord","array","temp","r","len","val","_typeof","indexOf","__words","update","dt","onButtonTapped","MOUSE_DOWN","MOUSE_UP","MOUSE_MOVE","_word"],"mappings":"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","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        labels: {\n            default: [],\n            type: cc.Label\n        },\n\n        touchNodes: {\n            default: [],\n            type: cc.Node,\n        },\n\n        _lineStartNode: null,\n        _lineEndNode: null,\n        _letters: null,\n        _letterArr: [],\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            console.log(\"touch start\");\n\n            this._lineStartNode = null;\n            this._lineEndNode = null;\n            this._letterArr = [];\n\n            let location = event.getLocation();\n            let pos = this.node.convertToNodeSpaceAR(location);\n\n            this.touchNodes.forEach(function (touchNode, index) {\n                if(touchNode.getBoundingBox().contains(pos))\n                {\n                    this._lineStartNode = touchNode;\n                    this._letterArr.push(this.labels[index].string);\n                }\n            }.bind(this));\n        }, this);\n\n\n        this.node.on(cc.Node.EventType.TOUCH_UP, function (event) {\n            console.log(\"touch up\");\n            this._lineStartNode = null;\n            this._lineEndNode = null;\n            this._letterArr = [];\n        }, this);\n\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\n            console.log(\"touch move\");\n            if(this._lineStartNode && !this._lineEndNode)\n            {\n                let location = event.getLocation();\n                let pos = this.node.convertToNodeSpaceAR(location);\n\n                this.touchNodes.forEach(function (touchNode, index) {\n                    if(touchNode.getBoundingBox().contains(pos))\n                    {\n                        if(touchNode != this._lineStartNode)\n                        {\n                            this._lineEndNode = touchNode;\n                            this._letterArr.push(this.labels[index].string);\n\n                            let word = this._letterArr.join('');\n                            let event = new cc.Event.EventCustom('match_word', true);\n                            event.detail = {word: word};\n                            this.node.dispatchEvent(event);\n                        }\n                    }\n                }.bind(this));\n            }\n        }, this);\n    },\n\n    start () {\n\n    },\n\n    setLetters (__letters) {\n        this._letters = __letters;\n        this.reload();\n    },\n\n    reload () {\n        if((this._letters instanceof Array) && (this._letters.length >= this.labels.length))\n        {\n            this.labels.forEach(function (label, index) {\n                label.string = this._letters[index];\n            }.bind(this));\n        }\n    },\n\n    // update (dt) {},\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        twoTouchNodesPrefab: cc.Prefab,\n        threeTouchNodesPrefab: cc.Prefab,\n        fourTouchNodesPrefab: cc.Prefab,\n        wordPrefab: cc.Prefab,\n\n        touchNode: cc.Node,\n        content: cc.Node,\n        lblPass: cc.Label,\n\n        _words: null,\n        _wordArr: [],\n        _passWordArr: [],\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this.lblPass.node.active = false;\n\n        console.log(\"main scene onload\");\n        this.node.on(\"match_word\", function (event) {\n            let word = event.detail.word;\n\n            if(this._wordArr.length > 0)\n            {\n                this._wordArr.forEach(function (__word) {\n                    if(word == __word)\n                    {\n                        if(this.checkAllWordsPassed())\n                        {\n                            this.lblPass.node.active = true;\n                            return;\n                        }\n\n                        if(this._passWordArr.length > 0)\n                        {\n                            for(let i = 0; i < this._passWordArr.length; ++i)\n                            {\n                                if(this._passWordArr[i] != word)\n                                {\n                                    this.showPassedWord(word);\n                                }\n                            }\n                        }\n                        else\n                        {\n                            this.showPassedWord(word);\n                        }\n                    }\n                }.bind(this));\n            }\n        }.bind(this));\n\n        // test\n        this.setWords(\"in,ok,no\");\n        //\n    },\n\n    reload: function () {\n        if(typeof this._words === \"string\")\n        {\n            this._wordArr = this._words.split(',');\n            let letterArr = [];\n            this._wordArr.forEach(function (word) {\n                for(let i = 0; i < word.length; ++i)\n                {\n                    letterArr.push(word[i]);\n                }\n            });\n\n            letterArr = this.uniq(letterArr);\n\n            let touchNodePrefab = null;\n            let touchNodeName = \"\";\n            switch(letterArr.length)\n            {\n                case 2:\n                    touchNodePrefab = this.twoTouchNodesPrefab;\n                    touchNodeName = \"twoTouchNodesView\";\n\n                    break;\n\n                case 3:\n                    touchNodePrefab = this.threeTouchNodesPrefab;\n                    touchNodeName = \"threeTouchNodesView\";\n\n                    break;\n\n                case 4:\n                    touchNodePrefab = this.fourTouchNodesPrefab;\n                    touchNodeName = \"fourTouchNodesView\";\n\n                    break;\n\n                default:\n                    break;\n            }\n\n            if(touchNodePrefab && touchNodeName != \"\")\n            {\n                let touchNode = cc.instantiate(touchNodePrefab);\n                if(touchNode)\n                {\n                    this.touchNode.addChild(touchNode);\n                    let touchNodeView = touchNode.getComponent(touchNodeName);\n                    if(touchNodeView)\n                    {\n                        touchNodeView.setLetters(letterArr);\n                    }\n                }\n            }\n\n        }\n    },\n\n    showPassedWord: function (word) {\n        let wordNode = cc.instantiate(this.wordPrefab);\n        if(wordNode)\n        {\n            this.content.addChild(wordNode);\n            let wordView = wordNode.getComponent(\"wordView\");\n            if(wordView)\n            {\n                wordView.setWord(word);\n                this._passWordArr.push(word);\n            }\n        }\n    },\n\n    checkAllWordsPassed: function () {\n        return this._passWordArr.length >= this._wordArr.length;\n    },\n\n    uniq: function (array){\n        let  temp = {}, r = [], len = array.length, val, type;\n        for (let i = 0; i < len; i++) {\n            val = array[i];\n            type = typeof val;\n            if (!temp[val]) {\n                temp[val] = [type];\n                r.push(val);\n            } else if (temp[val].indexOf(type) < 0) {\n                temp[val].push(type);\n                r.push(val);\n            }\n        }\n        return r;\n    },\n\n    setWords: function (__words) {\n        this._words = __words;\n        this.reload();\n    },\n\n    // called every frame\n    update: function (dt) {\n\n    },\n\n    onButtonTapped: function () {\n        console.log(\"tttttt\");\n    },\n});\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        labels: {\n            default: [],\n            type: cc.Label\n        },\n\n        touchNodes: {\n            default: [],\n            type: cc.Node,\n        },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\n                if(!this._lineStartNode)\n                {\n                    this._lineStartNode = touchNode;\n                }\n                else\n                {\n                    console.log(\"there is a touch down before\");\n                }\n            }, this);\n        });\n\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_UP, function (event) {\n                this._lineStartNode = null;\n                this._lineEndNode = null;\n            }, this);\n        });\n\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_MOVE, function (event) {\n                if(this._lineStartNode)\n                {\n                    if(this._lineStartNode != touchNode)\n                    {\n                        // draw line\n                    }\n                }\n            }, this);\n        });\n    },\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        labels: {\n            default: [],\n            type: cc.Label\n        },\n\n        touchNodes: {\n            default: [],\n            type: cc.Node,\n        },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\n                if(!this._lineStartNode)\n                {\n                    this._lineStartNode = touchNode;\n                }\n                else\n                {\n                    console.log(\"there is a touch down before\");\n                }\n            }, this);\n        });\n\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_UP, function (event) {\n                this._lineStartNode = null;\n                this._lineEndNode = null;\n            }, this);\n        });\n\n        this.touchNodes.forEach(function (touchNode) {\n            touchNode.on(cc.Node.EventType.MOUSE_MOVE, function (event) {\n                if(this._lineStartNode)\n                {\n                    if(this._lineStartNode != touchNode)\n                    {\n                        // draw line\n                    }\n                }\n            }, this);\n        });\n    },\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n\n        label: cc.Label,\n\n        _word: \"\",\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    setWord (__word) {\n        this._word = __word;\n        this.reload();\n    },\n\n    reload () {\n        if(this._word)\n        {\n            this.label.string = this._word;\n        }\n    },\n\n    // update (dt) {},\n});\n"],"sourceRoot":"/source/","file":"project.js"}